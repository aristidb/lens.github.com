<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Lens Library</title>
  <link href="http://lens.github.com/"/>
  <link type="application/atom+xml" rel="self" href="http://lens.github.com/atom.xml"/>
  <updated>2012-12-09T19:32:04-05:00</updated>
  <id>http://lens.github..com/</id>
  <author>
    <name>Edward Kmett</name>
    <email>ekmett@gmail.com</email>
  </author>

  
  <entry>
    <id>http://lens.github.com/theory/2012/12/09/finitary-traversals</id>
    <link type="text/html" rel="alternate" href="http://r6.ca/blog/20121209T182914Z.html"/>
    <title>On the static nature of traversals</title>
    <published>2012-12-09T00:00:00-05:00</published>
    <updated>2012-12-09T00:00:00-05:00</updated>
    <author>
      <name>Russell O'Connor</name>
      <uri>http://lens.github.com/</uri>
    </author>
    <content type="html"></content>
  </entry>
  
  <entry>
    <id>http://lens.github.com/tutorial/2012/12/09/24-days-of-hackage</id>
    <link type="text/html" rel="alternate" href="http://ocharles.org.uk/blog/posts/2012-12-09-24-days-of-hackage-lens.html"/>
    <title>24 Days of Hackage: lens</title>
    <published>2012-12-09T00:00:00-05:00</published>
    <updated>2012-12-09T00:00:00-05:00</updated>
    <author>
      <name>Oliver Charles</name>
      <uri>http://lens.github.com/</uri>
    </author>
    <content type="html"></content>
  </entry>
  
  <entry>
    <id>http://lens.github.com/announcements/2012/12/07/announcing-lens-3.7</id>
    <link type="text/html" rel="alternate" href="http://haskell.1045720.n5.nabble.com/ANNNOUNCE-lens-3-7-released-td5721968.html"/>
    <title>[ANNOUNCE] lens 3.7</title>
    <published>2012-12-07T00:00:00-05:00</published>
    <updated>2012-12-07T00:00:00-05:00</updated>
    <author>
      <name>Edward Kmett</name>
      <uri>http://lens.github.com/</uri>
    </author>
    <content type="html">		&lt;div&gt;Greetings!&lt;/div&gt;&lt;span id=&quot;goog_892676398&quot;&gt;&lt;/span&gt;&lt;span id=&quot;goog_892676399&quot;&gt;&lt;/span&gt;&lt;a href=&quot;/&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;&lt;/a&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;I am happy to announce the release of version 3.7 of the &lt;font face=&quot;courier new, monospace&quot;&gt;lens&lt;/font&gt; package, which provides &amp;quot;Lenses, Folds, and Traversals&amp;quot; for working with arbitrary data types.&lt;div&gt;
&lt;br&gt;&lt;/div&gt;&lt;div&gt;In its simplest form, a lens is a getter/setter pair, that can be composed and reasoned about with common sense laws that you can also derive from the Functor and Traversable laws you already know or even derive by reasoning in terms of comonad coalgebras for the even more theoretically inclined.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The &lt;font face=&quot;courier new, monospace&quot;&gt;lens&lt;/font&gt; package provides lenses along with a surprisingly powerful set of generalizations and specializations of this idea, in a manner that subsumes the notion of a &amp;quot;semantic editor combinator&amp;quot;, allowing you to enrich them with the ability to read back from the targets. In the form taken by the lenses in this package, lenses are empowered to safely change the types of the fields that they edit in a manner that not only can you still reason about, but where the changes in types helps you to reason about what they can or cannot do.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One of the major design goals of lens has been that you should be able to pick up lens combinators and apply them meaningfully to a mishmash of lenses, traversals, isomorphisms, getters, and setters, etc. even without fully understanding all of the types. This encourages active exploration and users who are pleasantly surprised rather than frustrated and angry. To this end we&amp;#39;ve actively stocked the haddocks for the project with types it may be easier to think about each combinator as having, which can serve as training wheels that will help you make your way around.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Most interestingly from a package maintainer perspective, unlike previous packages that provided lenses, it is possible to provide lenses (and traversals) that are compatible with the &lt;span style=&quot;font-family:&amp;#39;courier new&amp;#39;,monospace&quot;&gt;lens&lt;/span&gt; library without incurring any dependency for your package at all. For instance the simplest Traversal is &lt;font face=&quot;courier new, monospace&quot;&gt;traverse&lt;/font&gt; from Data.Traversable. &lt;font face=&quot;courier new, monospace&quot;&gt;traverse . traverse&lt;/font&gt; is also a valid Traversal, and it can be composed with other lenses and traversals without any casting or coercion.&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A large number of combinators are provided that automatically &amp;#39;do the right thing&amp;#39; when presented with the various generalizations and specializations of the concept of a lens, e.g. when supplied a Traversal instead of a Lens, a combinator that returned a result based on the target of the Lens, may now return a monoidal summary of all of the results targered by the Traversal.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Major Features:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* Lenses, getters, setters, isomorphisms, folds, &amp;quot;prisms&amp;quot;, monadic actions, and indexed versions of these constructions that can all be composed with (.) from the Prelude in a manner that they read quite naturally to an imperative programmer who expects (.) to be field access and to compose in the &amp;#39;wrong&amp;#39; direction, while still retaining the ability to reason about the resulting code.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* Type-safe zippers into arbitrary user data structures, where you can move down into a lens or laterally through a traversal and can come back up, following a breadcrumb trail in the type.&lt;/div&gt;&lt;div&gt;&lt;br&gt;
&lt;/div&gt;&lt;div&gt;* Lens contains a generalized version of Neil Mitchell&amp;#39;s uniplate in such a way that the uniplate combinators themselves that many people already know how to use can be used on an arbitrary traversal, and uniplate/biplate simply act as a Traversal, and are often ~35% or more faster than the original.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* Lens comes &amp;quot;batteries included&amp;quot; with classes and combinators for working with many common libraries that fall within the Haskell Platform. No dependencies are incurred that fall outside of the platform, unless those dependencies are needed to implement lens itself.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* We provide configurable template-haskell generators for producing lenses, isomorphisms and traversals for your own data types.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;New in this release:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* Prisms are categorically dual to Lenses and provide a form of first class pattern. They can be used directly as a Traversal. Many operations that formerly required an isomorphism can be used directly on a Prism, and every Isomorphism can be used as a Prism.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* With this latest release we&amp;#39;ve incorporated a large amount of community feedback into the API design and have vastly expanded the documentation with hundreds of additional examples and test cases.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* We&amp;#39;ve renamed a number of operations to reduce naming conflicts with third party libraries to a minimum, and improve consistency. in particular we no longer conflict with Control.Arrow. &lt;/div&gt;&lt;div&gt;
&lt;br&gt;&lt;/div&gt;&lt;div&gt;* We&amp;#39;ve overhauled the zipper API to permit easier use of multiple simultaneous zippers, and to make zipper movements more compositional.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Resources:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;
* &lt;a href=&quot;http://github.com/ekmett/lens/wiki/&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;Wiki&lt;/a&gt;: We have a &lt;a href=&quot;https://github.com/ekmett/lens/wiki/FAQ&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;FAQ&lt;/a&gt;, which includes a number of links to source material, a quick &lt;a href=&quot;https://github.com/ekmett/lens#examples&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;getting-started&lt;/a&gt; guide, a discussion of the &lt;a href=&quot;https://github.com/ekmett/lens/wiki/Derivation&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;Derivation&lt;/a&gt;, and even a &lt;a href=&quot;https://github.com/ekmett/lens#field-guide&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;UML diagram&lt;/a&gt; distributed among the other content of the wiki. If you find something missing or otherwise out of whack then feel free to edit it. =)&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* Larger Examples: We also have a number of &lt;a href=&quot;https://github.com/ekmett/lens/tree/master/examples&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;larger examples&lt;/a&gt; included in the lens distribution, including a fully operational game of Pong that plays using Gloss and a Brainfuck interpreter.&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* IRC: The &lt;font face=&quot;courier new, monospace&quot;&gt;&lt;a href=&quot;http://webchat.freenode.net/?channels=haskell-lens&amp;amp;uio=d4&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;#haskell-lens&lt;/a&gt;&lt;/font&gt; channel on &lt;font face=&quot;courier new, monospace&quot;&gt;&lt;a href=&quot;http://irc.freenode.net&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;irc.freenode.net&lt;/a&gt;&lt;/font&gt; is full of helpful people who work with or on lens itself. Lamdabot on &lt;font face=&quot;courier new, monospace&quot;&gt;#haskell&lt;/font&gt; has &lt;span style=&quot;font-family:&amp;#39;courier new&amp;#39;,monospace&quot;&gt;lens&lt;/span&gt; installed, and golfing solutions to user questions using lens as well as more traditional techniques has become disturbingly common.&lt;/div&gt;
&lt;div&gt;as&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* I &lt;a href=&quot;http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;gave a talk last month&lt;/a&gt; at Google in San Francisco about &amp;quot;Lenses, Folds, and Traversals&amp;quot;, and just under 100 people showed up. Sadly, this talk was not recorded.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* However, &lt;a href=&quot;http://www.meetup.com/NY-Haskell/events/91576512/&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;I plan to give an updated version of that talk&lt;/a&gt; at the &lt;a href=&quot;http://www.meetup.com/NY-Haskell/&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;New York Haskell User Group&lt;/a&gt; meeting on Wednesday, December 12th from 7:00-9:00PM. At the time of this writing we have 94 slated as coming and room for 26 more, so if you&amp;#39;ll be in the New York area on the 12th and are interested, register soon. =) That said, this time the talk will be recorded and the video will be made available online, so even if you can&amp;#39;t make it out, you can still enjoy the talk.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Support: &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* We currently support the last 3 versions of the Haskell Platform, including versions of GHC back to 7.0.4 and are actively maintaining the project as part of &lt;a href=&quot;https://github.com/fpco/stackage&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;stackage&lt;/a&gt;. We intend to maintain support for a rolling wave of at least 2 previous Haskell Platform releases going forward.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* If you have any questions or comments, please feel free to contact me by email, github, or IRC.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Edward&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <id>http://lens.github.com/tutorial/2012/11/21/getting-started-with-lenses</id>
    <link type="text/html" rel="alternate" href="http://newartisans.com/2012/11/getting-started-with-lenses/"/>
    <title>Getting Started with Lenses</title>
    <published>2012-11-21T00:00:00-05:00</published>
    <updated>2012-11-21T00:00:00-05:00</updated>
    <author>
      <name>John Wiegley</name>
      <uri>http://lens.github.com/</uri>
    </author>
    <content type="html"></content>
  </entry>
  
  <entry>
    <id>http://lens.github.com/announcement/2012/11/20/ny-haskell</id>
    <link type="text/html" rel="alternate" href="http://haskell.1045720.n5.nabble.com/ANN-NY-Haskell-presents-Edward-Kmett-on-Lenses-Folds-and-Traversals-Wed-December-12-td5720745.html"/>
    <title>ANN: NY Haskell presents Edward Kmett on Lenses, Folds, and Traversals -- Wed., December 12</title>
    <published>2012-11-20T00:00:00-05:00</published>
    <updated>2012-11-20T00:00:00-05:00</updated>
    <author>
      <name>Gershom Bazerman</name>
      <uri>http://lens.github.com/</uri>
    </author>
    <content type="html">The first NY Haskell Users Group meetup was a great success -- with
&lt;br/&gt;roughly sixty attendees and conversations that stretched far too late
&lt;br/&gt;for a weekday night. Video and slides are available for both the
&lt;br/&gt;Practical Data Processing and Cloud Haskell talks:
&lt;br/&gt;&lt;br/&gt;Video: &lt;a href=&quot;http://vimeo.com/53906049&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;http://vimeo.com/53906049&lt;/a&gt;&lt;br/&gt;Slides on Practical Data Processing:
&lt;br/&gt;&lt;a href=&quot;http://gbaz.github.com/slides/PracticalData-11-2012.pdf&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;http://gbaz.github.com/slides/PracticalData-11-2012.pdf&lt;/a&gt;&lt;br/&gt;Slides on Cloud Haskell: &lt;a href=&quot;http://gbaz.github.com/slides/cloud-11-2012.html&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;http://gbaz.github.com/slides/cloud-11-2012.html&lt;/a&gt;&lt;br/&gt;Source for Cloud Haskell:
&lt;br/&gt;&lt;a href=&quot;https://github.com/gbaz/slides/blob/gh-pages/cloud-11-2012.lhs&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;https://github.com/gbaz/slides/blob/gh-pages/cloud-11-2012.lhs&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;We expect our next meetup will be equally exciting, at a bare minimum.
&lt;br/&gt;We're actively seeking cool talks and presentations. If you're not a
&lt;br/&gt;New York local, but may be passing through or are in the tri-state
&lt;br/&gt;area or thereabouts, and would like to present some code or research
&lt;br/&gt;with even tangentially real-world implications to an informed and
&lt;br/&gt;appreciated audience, please do get in touch :-)
&lt;br/&gt;&lt;br/&gt;Also, there will be a NY tech holiday party on December 11th, which we
&lt;br/&gt;are organizing along with other NY technology and PL groups. Details
&lt;br/&gt;are available at the on the meetup site:
&lt;br/&gt;&lt;a href=&quot;http://www.meetup.com/NY-Haskell/&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;http://www.meetup.com/NY-Haskell/&lt;/a&gt;. Finally, at some point, we will
&lt;br/&gt;probably cease to spam -cafe with announcements of all our events, so
&lt;br/&gt;even if you can't make it to the next few ones, registering at the
&lt;br/&gt;meetup site is the best way to stay on top of what we will have
&lt;br/&gt;planned.
&lt;br/&gt;&lt;br/&gt;- - - -
&lt;br/&gt;&lt;br/&gt;Lenses, Folds, and Traversals
&lt;br/&gt;presented by Edward Kmett
&lt;br/&gt;&lt;br/&gt;Wednesday, December 12, 2012
&lt;br/&gt;7:00 PM To 9:00 PM
&lt;br/&gt;&lt;br/&gt;Pivotal Labs, 841 Broadway New York, NY
&lt;br/&gt;(8th Floor)
&lt;br/&gt;&lt;br/&gt;RSVP: &lt;a href=&quot;http://www.meetup.com/NY-Haskell/&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;http://www.meetup.com/NY-Haskell/&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;Edward Kmett will introduce his lens library, which provides a highly
&lt;br/&gt;composable toolbox for accessing and modifying multiple parts of data
&lt;br/&gt;structures.
&lt;br/&gt;&lt;br/&gt;From simple beginnings, starting with building blocks such as fmap and
&lt;br/&gt;(.), we will build up combinators suitable for working with a wide
&lt;br/&gt;array of data structures. These generalize the notions you already
&lt;br/&gt;know how to use into a form that is easier to compose, and
&lt;br/&gt;simultaneously allow them to be used for monomorphic containers such
&lt;br/&gt;as Data.Text. All without compromising on your ability to reason about
&lt;br/&gt;them using laws!
&lt;br/&gt;&lt;br/&gt;Once we've built up some foundations, we'll do a bit of a deep dive,
&lt;br/&gt;exploring consequences of this design. We will discuss the efficient
&lt;br/&gt;generic programming programming framework exported by lens, and
&lt;br/&gt;type-safe Traversal-based zippers.
&lt;br/&gt;&lt;br/&gt;Familiarity with the Applicative and Traversable classes from the
&lt;br/&gt;Haskell base libraries will be helpful (links provided below), but a
&lt;br/&gt;basic understanding of the concepts will be introduced we go along.
&lt;br/&gt;Attendees should expect to be gobsmacked with a newfound appreciation
&lt;br/&gt;for the power of a little (or a lot of) abstraction.
&lt;br/&gt;&lt;br/&gt;Useful (but not mandatory) references:
&lt;br/&gt;&lt;br/&gt;The lens library and documentation: &lt;a href=&quot;http://hackage.haskell.org/package/lens&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;http://hackage.haskell.org/package/lens&lt;/a&gt;&lt;br/&gt;A previous, more introductory talk on how to use the lenses Edward
&lt;br/&gt;Kmett wrote for the scalaz in the Scala programming language:
&lt;br/&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=efv0SQNde5Q&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;https://www.youtube.com/watch?v=efv0SQNde5Q&lt;/a&gt;&lt;br/&gt;The original Applicative paper:
&lt;br/&gt;&lt;a href=&quot;http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf&lt;/a&gt;&lt;br/&gt;Lots of information on Traversable:
&lt;br/&gt;&lt;a href=&quot;http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;http://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf&lt;/a&gt;&lt;br/&gt;A write-up of this talk, as presented at the Bay Area Haskell Users
&lt;br/&gt;Group: &lt;a href=&quot;http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html&quot; target=&quot;_top&quot; rel=&quot;nofollow&quot; link=&quot;external&quot;&gt;http://google-opensource.blogspot.com/2012/10/lenses-folds-and-traversals-haskell.html&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>http://lens.github.com/theory/2012/06/24/mirrored-lenses</id>
    <link type="text/html" rel="alternate" href="http://comonad.com/reader/2012/mirrored-lenses/"/>
    <title>Mirrored Lenses</title>
    <published>2012-06-24T00:00:00-04:00</published>
    <updated>2012-06-24T00:00:00-04:00</updated>
    <author>
      <name>Edward Kmett</name>
      <uri>http://lens.github.com/</uri>
    </author>
    <content type="html"></content>
  </entry>
  
  <entry>
    <id>http://lens.github.com/theory/2012/06/23/polymorphic-update-with-van-laarhoven-lenses</id>
    <link type="text/html" rel="alternate" href="http://r6.ca/blog/20120623T104901Z.html"/>
    <title>Polymorphic update with van Laarhoven lenses</title>
    <published>2012-06-23T00:00:00-04:00</published>
    <updated>2012-06-23T00:00:00-04:00</updated>
    <author>
      <name>Russell O'Connor</name>
      <uri>http://lens.github.com/</uri>
    </author>
    <content type="html"></content>
  </entry>
  
</feed>
